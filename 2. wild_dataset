################################# generate the wild dataset ######################################
### 887 individuals of Puntigius pungitius from 45 global populations were sequenced and published in Feng et al. (2022, https://doi.org/10.1111/mec.16651). 
### the raw sequencing data were re-mapped to version 7 reference of Pungitius pungitius (Kivikoski et al. 2021; https://www.ebi.ac.uk/ena/browser/view/GCA_902500615?show=assembly-versions) and processed in GATK in the same way for the family dataset. 

######################## get biallelic SNPs from the GATK processed data ######################## 
# the following processing was by chromosome 
## get biallelic SNPs
for chr in {1..21}
do
bcftools view -m2 -M2 -v snps --min-ac=1 nsp1075_LG${chr}.vcf.gz -Oz -o v7.LG${chr}.vcf.gz
done

################### characterize SDR(s) in the wild dataset ###################
module load samtools
module load vcftools
module load plink 

##### subset the LG3 SDR 
chr=3
ind=Feng887
bcftools view v7.LG${chr}.vcf.gz -S ${ind}.list --regions LG3:17260000-17340000 \
| vcftools --vcf - --minGQ 20 --minQ 30 --min-meanDP 5 --max-meanDP 25 --maf 0.01 --max-missing 0.3 --recode --recode-INFO-all -c \
| bcftools view -Oz -o ${ind}_LG${chr}sex_a1m3.vcf.gz

##### subset the LG12 SDR 
chr=12
ind=Feng887
bcftools view v7.LG${chr}.vcf.gz -S ${ind}.list --regions LG12:1-16900000 \
| vcftools --vcf - --minGQ 20 --minQ 30 --min-meanDP 5 --max-meanDP 25 --maf 0.01 --max-missing 0.3 --recode --recode-INFO-all -c \
| bcftools view -Oz -o ${ind}_LG${chr}sex_a1m3.vcf.gz

for chr in 3 12
do
## estiamte heterozygosity and F-value
vcftools --gzvcf ${ind}_LG${chr}sex_a1m3.vcf.gz --het --out ${ind}_LG${chr}sex_a1m3

## PCA on the populations sexed by each SDR (based on F-values)
bcftools view ${ind}_LG${chr}sex_a1m3.vcf.gz -S LG${chr}_ID.list -Oz -o ${ind}_LG${chr}sex_a1m3_LG${chr}pop.vcf.gz
vcftools --gzvcf ${ind}_LG${chr}sex_a1m3_LG${chr}pop.vcf.gz --missing-indv --out ${ind}_LG${chr}sex_a1m3_LG${chr}pop
plink2 --vcf ${ind}_LG${chr}sex_a1m3_LG${chr}pop.vcf.gz --pca --allow-extra-chr --out ${ind}_LG${chr}sex_a1m3_LG${chr}pop

## PCA on the populations sexed by the other SDR
if [ $chr == 3 ]
then
pop=12
else
pop=3
fi
bcftools view ../Feng887_LG${chr}sex_a1m3.vcf.gz -S ../../scripts/Feng887/LG${pop}_ID.list -Oz -o Feng887_LG${chr}sex_a1m3_LG${pop}pop.vcf.gz
vcftools --gzvcf Feng887_LG${chr}sex_a1m3_LG${pop}pop.vcf.gz --missing-indv --out Feng887_LG${chr}sex_a1m3_LG${pop}pop
plink2 --vcf Feng887_LG${chr}sex_a1m3_LG${pop}pop.vcf.gz --pca  --allow-extra-chr --out Feng887_LG${chr}sex_a1m3_LG${pop}pop

done

################################## R plots and analyses ###########################################
library(ggplot2)
library(ggpubr)
library(dplyr)
pop = read.csv("pop_v7.csv")
sif = read.csv("ind_v7.csv")
non_EU = c("RUS-LEN", "JAP-BIW", "USA-HLA", "CAN-FLO", "CAN-TEM")
unknown = c("SCO-HAR", "GBR-GRO")

my.pop.order = c("GBR-GRO*", "SCO-HAR*", "FRA-VEY", "BEL-MAL", "DEN-NOR", "NOR-UGE", "NOR-ENG", 
                 "SWE-FIS", "GER-RUE", "POL-GDY", "NOR-KVN",
                 "DEN-RES", "NOR-TYR", "SWE-LUN", "SWE-GOT", "SWE-HAN", "SWE-NAV", "SWE-ABB", 
                 "SWE-BYN", "SWE-KIR", "SWE-BOL", "LAT-JAU", "FIN-SEI", "FIN-TVA", "FIN-RII", 
                 "FIN-HEL", "FIN-KIV", "FIN-KAR", "EST-PUR", "FIN-KEV", "FIN-HAM", "FIN-UKO", 
                 "FIN-PUL", "FIN-KRK", "FIN-RYT", "FIN-PYO", "RUS-KRU", "RUS-BOL", "RUS-MAS", 
                 "RUS-LEV",
                 "RUS-LEN", "JAP-BIW","USA-HLA", "CAN-FLO", "CAN-TEM")
sif887$stroke=0
for (i in 1:nrow(sif887)) {
  if(sif887[i, "Population"] %in% unknown){
    sif887[i, "Population"] = paste0(sif887[i, "Population"], "*")
    sif887[i, "stroke"] = 0.5
  }}

##### all 887 individuals from 45 populations: genetic sex identification based on F-values #####
for (chr in c(3, 12)){
  title = ifelse(chr==3, "LG3:17260000-17340000", "LG12:1-16900000")
  data = paste0("Feng887_LG", chr, "sex_a1m3")
  het = read.table(paste0(data, ".het"), header=1)
  het = merge(het, sif887, by.x="INDV", by.y="SampleID")
  assign(paste0("LG", chr, "sex_het_plot"), ggplot() + 
           geom_jitter(data=het, 
                       aes(x=factor(Population, levels = my.pop.order), y=F, color=sex), 
                       size=3, alpha=0.5, width=0.3) + 
           scale_color_manual(values = c("Female"="indianred", "Male"="royalblue")) +
           labs(x="45 Populations", y="inbreeding coefficient (F)", 
                title=title) + theme_bw() +
           theme(axis.text.x = element_text(angle=90)))
}
ggarrange(ncol=1, nrow=2, LG3sex_het_plot, LG12sex_het_plot)

###### PCA of EU pops sexed by each SDR ######
for (chr in c(12, 3)){
  title = ifelse(chr==3, "LG3:17.26-17.34 Mb", "LG12:1-16.9 Mb")
  data = paste0("Feng887_LG", chr, "sex_a1m3_LG", chr, "pop")
  pca = read.table(paste0(data, ".eigenvec"))
  miss = read.table(paste0(data, ".imiss"), header=1)
  names(pca) =c("ID", paste0("PC", 1:(ncol(pca)-1)))
  pca = merge(pca, miss, by.x="ID", by.y="INDV")
  pca = merge(pca, sif887, by.x="ID", by.y="SampleID")
  eig=read.table(paste0(data, ".eigenval"))
  
  assign(paste0("LG", chr, "sex_miss.plot"),ggplot(pca, aes(x=PC1, y=PC2, color=F_MISS)) +
           geom_point(size=2.5, stroke=1, alpha=0.5) +
           geom_hline(yintercept=0, color="grey60", size=0.1) + 
           geom_vline(xintercept=0, color="grey60", size=0.1) +
           labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                title=title) + theme_bw() +
           theme(legend.background = element_rect(fill = "transparent")))
  assign(paste0("LG", chr, "sex_pop.plot"), ggplot() +
           geom_point(data=pca, aes(x=PC1, y=PC2, fill=Population, stroke=stroke), 
                      size=2.5, alpha=0.5, shape=21) +
           geom_hline(yintercept=0, color="grey60", size=0.1) + 
           geom_vline(xintercept=0, color="grey60", size=0.1) +
           labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                title=title) + theme_bw() +
           theme(legend.background = element_rect(fill = "transparent")))

  if (chr==12) {
    pca$Population_plot = pca$Population
    pca[!(pca$Population_plot %in% c("POL-GDY", "GBR-GRO", "SCO-HAR")), "Population_plot"] = "EL"
    pca$Population_plot = factor(pca$Population_plot, levels=c("EL", "POL-GDY"))
    pca = pca[order(pca$Population_plot),]
    assign(paste0("LG", chr, "sex_pca.plot"), ggplot() +
             geom_point(data=pca, aes(x=PC1, y=PC2, color=sex, shape=Population_plot), 
                        size=2, stroke=0.8, alpha=0.5) +
             scale_color_manual(values = c("Female"="indianred", "Male"="royalblue")) +
             scale_shape_manual(values = c("EL"=16, "POL-GDY"=5)) +
             geom_hline(yintercept=0, color="grey60", linewidth=0.1) + 
             geom_vline(xintercept=0, color="grey60", linewidth=0.1) +
             labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                  y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                  title=title) + theme_bw() +
             theme(legend.background = element_rect(fill = "transparent")))
  }
  if (chr==3) {
    pca$Population_plot = pca$Population
    pca[!(pca$Population_plot %in% c("POL-GDY", "GBR-GRO", "SCO-HAR")), "Population_plot"] = "WL"
    pca$Population_plot = factor(pca$Population_plot, levels=c("WL", "GBR-GRO", "SCO-HAR", "POL-GDY"))
    pca[pca$Population %in% c("GBR-GRO", "SCO-HAR") & pca$sex == "Female", "sex"] = "LG3-homozygote"
    pca[pca$Population %in% c("GBR-GRO", "SCO-HAR") & pca$sex == "Male", "sex"] = "LG3-heterozygote"
    pca = pca[order(pca$Population_plot),]
    assign(paste0("LG", chr, "sex_pca.plot"), ggplot() +
             geom_point(data=pca, aes(x=PC1, y=PC2, color=sex, shape=Population_plot), 
                        size=2, stroke=0.8, alpha=0.5) +
             scale_color_manual(values = c("Female"="indianred", "Male"="royalblue",
                                           "LG3-homozygote" = "#440000", "LG3-heterozygote"="#031740")) +
             scale_shape_manual(values = c("WL"=16, "POL-GDY"=5, 
                                           "GBR-GRO"=3, "SCO-HAR"=8)) +
             geom_hline(yintercept=0, color="grey60", linewidth=0.1) + 
             geom_vline(xintercept=0, color="grey60", linewidth=0.1) +
             labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                  y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                  title=title) + theme_bw() +
             theme(legend.background = element_rect(fill = "transparent")))
  }
}

## following above, pca here is for LG3 WL
het = read.table("Feng887_LG3sex_a1m3_LG3pop.het", header=1)
lg3_data = merge(pca, het, by.x = "ID", by.y = "INDV")
lg3_data$O_HET = (lg3_data$N_SITES - lg3_data$O.HOM.) / lg3_data$N_SITES

mean(lg3_data[lg3_data$sex == "Male" & lg3_data$Population != "POL-GDY", "PC1"])
#[1] -0.0589662
## center heterozygotes around zero
lg3_data$PC1 = lg3_data$PC1 + 0.0589662
## fold
lg3_data$PC1 = abs(lg3_data$PC1)

cor.test(x=lg3_data$PC1, y=lg3_data$O_HET, method = "pearson", alternative = "two.sided")

lg3_data = lg3_data[order(lg3_data$Population_plot, lg3_data$sex),]
p3 = ggplot(lg3_data, aes(x=PC1, y=O_HET)) + 
  geom_smooth(method='lm', color="grey50", fill="grey85", lwd=0.3, alpha=0.5) +
  geom_point(aes(color=sex, shape=Population_plot), size=2, stroke=0.8, alpha=0.5) +
  #scale_color_manual(values=c("Female"="indianred", "Male"="royalblue", "unknown"="grey30")) +
  scale_color_manual(values = c("Female"="indianred", "Male"="royalblue",
                                "LG3-homozygote" = "#440000", "LG3-heterozygote"="#031740")) +
  scale_shape_manual(values = c("WL"=16, "POL-GDY"=5, "GBR-GRO"=3, "SCO-HAR"=8)) +
  geom_text(x=0.1, y=0.55, label="r=-0.96\np-value < 2.2e-16") +
  labs(y="observed heterozygosity", title = title, x="PC1 (centered and folded)") +
  theme_bw() + theme(legend.background = element_rect(fill = "transparent"))

ggarrange(ncol=3, nrow=1, widths = c(0.9, 1,1),
          LG12sex_pca.plot + 
            geom_text(aes(x=-0.02, y=0), label="XX", size=4) +
            geom_text(aes(x=0.03, y=0), label="XY", size=4),
          LG3sex_pca.plot + geom_text(aes(x=0.01, y=0.1), label="XX", size=4) +
            geom_text(aes(x=-0.05, y=0.1), label="XY", size=4) + 
            geom_text(aes(x=-0.17, y=0.04), label="LG3-Y'Y'", size=4),
          p3, labels = c("A)", "B)", "C)"))

########################### PCA of EU pops sexed by the other SDR ###############################
module load samtools
module load vcftools
module load plink 
## excluding POL-GDY (which would include sex signal)
cat ../../scripts/Feng887/LG3_ID.list | grep -v POL > LG3_ID_noPOL.list
cat ../../scripts/Feng887/LG12_ID.list | grep -v POL > LG12_ID_noPOL.list

for chr in 3 12
do
if [ $chr == 3 ]
then
pop=12
else
pop=3
fi

bcftools view ../Feng887_LG${chr}sex_a1m3.vcf.gz -S LG${pop}_ID_noPOL.list -Oz -o Feng887_LG${chr}sex_a1m3_LG${pop}pop_noPOL.vcf.gz
vcftools --gzvcf Feng887_LG${chr}sex_a1m3_LG${pop}pop_noPOL.vcf.gz --missing-indv --out Feng887_LG${chr}sex_a1m3_LG${pop}pop_noPOL
plink2 --vcf Feng887_LG${chr}sex_a1m3_LG${pop}pop_noPOL.vcf.gz --pca  --allow-extra-chr --out Feng887_LG${chr}sex_a1m3_LG${pop}pop_noPOL

## plot in R
source("my.map.R")
mercator = my.map(pop[!(pop$Population %in% non_EU),]) 

my.pop.col = c("DEN-RES"="#990000", "NOR-TYR"="#d7301f", "SWE-LUN"="#ef6548", "SWE-BOL"="#ec7014", "SWE-GOT"="#fec44f", "LAT-JAU"="#f7f7b9", "EST-PUR"="#d9f0a3", "FIN-HEL"="#addd8e", "FIN-HAM"="#78c679", "FIN-KIV"="#41ab5d", "FIN-SEI"="#238443", "FIN-TVA"="#006837", "SWE-ABB"="#a6bddb", "SWE-BYN"="#67a9cf", "SWE-HAN"="#3690c0", "SWE-KIR"="#02818a", "SWE-NAV"="#7bccc4", "FIN-KAR"="#4eb3d3", "FIN-RII"="#2b8cbe", "FIN-RYT"="#0868ac", "RUS-BOL"="#2171b5", "RUS-KRU"="#08519c", "RUS-MAS"="#08306b", "RUS-LEV"="#08306b", "FIN-KRK"="#88419d", "FIN-PYO"="#810f7c", "FIN-KEV"="#fa9fb5", "FIN-PUL"="#f768a1", "FIN-UKO"="#dd3497",
               ## note that same colors reused below
"BEL-MAL"="#d7301f", "DEN-NOR"="#ec7014", "FRA-VEY"= "#f768a1", "NOR-UGE"="#88419d", "GER-RUE"="#fec44f", "NOR-ENG"="#addd8e", "NOR-KVN"="#41ab5d", "SWE-FIS"="#006837", "SCO-HAR"="#4eb3d3", "GBR-GRO"="#08519c")

for (chr in c(12, 3)){
  title = ifelse(chr==3, "LG3:17260000-17340000", "LG12:1-16900000")
  p = ifelse(chr=="3", 12, 3)
  data = paste0("Feng887_LG", chr, "sex_a1m3_LG", p, "pop_noPOL")
  pca = read.table(paste0(data, ".eigenvec"))
  miss = read.table(paste0(data, ".imiss"), header=1)
  names(pca) =c("ID", paste0("PC", 1:(ncol(pca)-1)))
  pca = merge(pca, miss, by.x="ID", by.y="INDV")
  pca = merge(pca, sif887, by.x="ID", by.y="SampleID")
  eig=read.table(paste0(data, ".eigenval"))
  
  assign(paste0("LG", chr, "SDR_pop", p, "_PCA_sex.plot"), ggplot() +
           geom_point(data=pca[pca$Population != "POL-GDY",], 
                      aes(x=PC1, y=PC2, fill=sex), size=2, stroke=0.3, alpha=0.5, shape=21) +
           geom_text(data=pca[pca$Population == "POL-GDY", ], 
                     aes(x=PC1, y=PC2, color=sex, label=Population), size=2) +
           scale_fill_manual(values = c("Female"="indianred", "Male"="royalblue")) +
           scale_color_manual(values = c("Female"="indianred", "Male"="royalblue"), guide="none") +
           geom_hline(yintercept=0, color="grey60", linewidth=0.1) + 
           geom_vline(xintercept=0, color="grey60", linewidth=0.1) +
           labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                title=title) + theme_bw() +
           theme(legend.background = element_rect(fill = "transparent")))
  
  assign(paste0("LG", chr, "SDR_pop", p, "_PCA_miss.plot"), ggplot() +
           geom_point(data=pca, aes(x=PC1, y=PC2, fill=F_MISS), size=2, stroke=0.3, alpha=0.5, shape=21) +
           geom_hline(yintercept=0, color="grey60", linewidth=0.1) + 
           geom_vline(xintercept=0, color="grey60", linewidth=0.1) +
           labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                title=title) + theme_bw() +
           theme(legend.background = element_rect(fill = "transparent")))
  
    assign(paste0("LG", chr, "SDR_pop", p, "_PCA_pop.plot"), ggplot() +
             geom_point(data=pca[pca$Population %in% pop[pop$Ecotype =="Marine", "Population"], ], 
                        aes(x=PC1, y=PC2, fill=Population), shape=21, size=2, stroke=0.3, alpha=0.5) +
             geom_point(data=pca[!(pca$Population %in% pop[pop$Ecotype =="Marine", "Population"]), ], 
                        aes(x=PC1, y=PC2, fill=Population), shape=24, size=2, stroke=0.3, alpha=0.5) +
             scale_fill_manual(values=my.pop.col, breaks = names(my.pop.col)) +
             geom_hline(yintercept=0, color="grey60", linewidth=0.1) + 
             geom_vline(xintercept=0, color="grey60", linewidth=0.1) +
             labs(x=paste0("PC1: ", round(eig[1,1]/sum(eig)*100), "%"), 
                  y=paste0("PC2: ", round(eig[2,1]/sum(eig)*100),"%"),
                  title=title) + theme_bw() +
             theme(legend.background = element_rect(fill = "transparent")))
    
    assign(paste0("LG", chr, "SDR_pop", p, "_map.plot"), mercator + 
             geom_point(data=pop[pop$Population %in% unique(pca$Population) & pop$Ecotype != "Marine",], aes(x=long_ling, y=lat_ling, fill=Population), shape=24, size=3, stroke=0.2) + 
             geom_point(data=pop[pop$Population %in% unique(pca$Population) & pop$Ecotype == "Marine",], aes(x=long_ling, y=lat_ling, fill=Population), shape=21, size=3, stroke=0.2) + 
             guides(fill = guide_legend(override.aes=list(shape = 21))) +
             scale_fill_manual(values=my.pop.col, breaks = names(my.pop.col)) +
             theme_void())
             }
p1 = ggarrange(ncol=2, nrow=2, labels = c("A)", "B)", "C)", "D)"),
          LG3SDR_pop12_PCA_miss.plot, LG12SDR_pop3_PCA_miss.plot,
          LG3SDR_pop12_PCA_sex.plot, LG12SDR_pop3_PCA_sex.plot)
p2 = ggarrange(ncol=2, nrow=2, labels = c("E)", "F)", "G)", "H)"),
          LG3SDR_pop12_PCA_pop.plot + theme(legend.position = "none"), LG3SDR_pop12_map.plot,
          LG12SDR_pop3_PCA_pop.plot + theme(legend.position = "none"), LG12SDR_pop3_map.plot)
ggarrange(nrow=2, ncol=1, heights = c(1, 1.5), p1, p2)



########################### the phylogeny dataset of LG3 homozygotes ###############################
## select 109 samples representing outgroups and LG3 homozygotes 
ind=tree109
chr=3
bcftools view -S ${ind}.list ../../v7/v7.LG${chr}.vcf.gz --regions LG3:17260000-17340000 \
| vcftools --vcf - --minGQ 20 --minQ 30 --min-meanDP 5 --max-meanDP 25 --maf 0.01 --max-missing 0.3 --recode --recode-INFO-all -c | bcftools view -Oz -o ${ind}_LG3sex_a1m3.vcf.gz

/projappl/project_2006364/vcf2phylip-master/vcf2phylip.py --input tree109_LG3sex_a1m3.vcf.gz

raxmlHPC-PTHREADS -T 24 -f a -m GTRGAMMA -p 109 -x 109 -# 1000 -s tree109_LG3sex_a1m3.min4.phy -n tree109_LG3sex_a1m3



############################ detect putative structural variant using BreakDancer ################################## 
## BreakDancer (https://github.com/genome/breakdancer)
## only focus on LG3
samtools view -h ${ind}_markdup.bam LG3 | samtools view -o ${ind}_LG3.bam

## generate configuration using all individuals in each dataset and/or sex
perl breakdancer_perl/bam2cfg.pl -g ${ind1}_LG3.bam ${ind2}_LG3.bam > ${mydata}_${sex}_config

### R script to filter out read groups of low quality 
conf_ReadIn_QualityCheck = function(conf, ...){
  low_quality = NULL
  for (i in 1:nrow(conf)){
    data = conf[i,]
    
    ## quality control 3: the coefficient of variation of the insert size should be < 0.2 or 0.3; most of my data are >0.3 but < 0.4
    std = gsub("std:", "", data$std)
    mean = gsub("mean:", "", data$mean)
    cof.var = as.numeric(std)/as.numeric(mean)
    if (cof.var > 0.4) {
      print(paste0(data$readgroup, ":  cof.var", cof.var))
      low_quality = c(low_quality, i)}
    
    ## quality control 4: percentage of inter-chr read pairs (tag 32) should be <3%
    flag = gsub("flag:", "", data$flag)
    flag = unlist(strsplit(flag, ")", fixed = T))
    t32 = gsub("32(", "", flag[grep("32(", flag, fixed=T)], fixed = T)
    if (length(t32) > 0){
      if (!is.na(t32)) {
        t32 = gsub("%", "", t32, fixed = T)
        if( as.numeric(t32) > 4 ) {
          print(paste0(data$readgroup, ":  t32=", t32))
          low_quality = c(low_quality, i)
        }}}
  }
  return(low_quality)
}
# filter by quality 
for (sex in c("Female", "Male")){
  print(sex)
  conf = read.table(paste0(path, mydata, "_", sex, "_config"), sep="\t")
  names(conf) = c("readgroup", "platform", "map", "readlen", "lib", "num", "lower", "upper", "mean", "std", "SWnormality", "flag", "exe")
  low_quality = conf_ReadIn_QualityCheck(conf)
  
  ## exclude the low-quality readgroups
  if(is.null(low_quality)){conf_csc = conf}
  if(!is.null(low_quality)){conf_csc = conf[-low_quality,]}
  write.table(conf_csc, paste0(mydata, "_", sex, "_config_filter"), sep="\t", quote = F, row.names = F, col.names = F)
}
#### end of R script 

## more quality check in unix
cat ${mydata}_${sex}_config_filter | awk '{print $1}' | sed 's/readgroup://g; s/\..*//g' > ${sex}.list
c1=$(samtools view -H ./${mydata}/${ind}_LG3.bam | grep -c @RG)
c2=$(grep -c ./${mydata}/${ind}_LG3.bam ${mydata}_${sex}_config_csc)
if [[ $c1 < $c2 ]]
then
echo $ind
fi
done < ${sex}.list
done
## no output
grep -cw readgroup:NA ${mydata}_*_config_csc  
## 0 

### run BreakDancer using the filtered configure file 
breakdancer/build/bin/breakdancer-max -a ${mydata}_${sex}_config_filter > ${mydata}_${sex}_SV

### R scripts for filtering and plotting results  
SV = read.table(paste0(mydata, "_", sex, "_SV"))
names(SV) = c("Chr1",	"Pos1",	"Orientation1", "Chr2",	"Pos2",	"Orientation2",	"Type",	"Size",	"Score",	"num_Reads",	"num_Reads_lib") 
  
## filter SV by confidence score and supporting read count
SV.high = SV[SV$Score >= 99 & SV$num_Reads > median(SV$num_Reads), ]
SV.high$num_ind = 0
SV.high$per_pop = 0
  
for (i in 1:nrow(SV.high)){
    data = SV.high[i,]
    samples = unlist(strsplit(data$num_Reads_lib, split=":", fix=T))
    SV.high[i, "num_ind"] = length(samples)
    
    samples.sort = NULL
    for (j in 1:length(samples)) {
      samples.sort = rbind(samples.sort, unlist(strsplit(unlist(strsplit(samples[j], ",", fixed = T))[1], "|", fixed=T)))}
    samples.sort = as.data.frame(samples.sort)
    names(samples.sort) = c("SampleID", "number_reads")
    samples.sort = merge(samples.sort, sif[, c("SampleID", "Population", "genetic_sex" )], by="SampleID")
    per_pop = NULL
    for (p in unique(sif$Population)){
        per_pop = c(per_pop, paste0(nrow(samples.sort[samples.sort$Population == p, ]), "-", p))
    }
    SV.high[i, "per_pop"] = paste0(per_pop, collapse = "; ")
  }
  
  SV.high.sdr = SV.high[SV.high$Pos1 > 17200000 & SV.high$Pos1 < 17400000 &
                          SV.high$Pos2 > 17200000 & SV.high$Pos2 < 17400000,]
  SV.high.sdr = SV.high.sdr[order(SV.high.sdr$num_Reads, decreasing = T), ]
  SV.high.sdr$ID = 1:nrow(SV.high.sdr)
  
  ggplot(SV.high.sdr) + geom_segment(aes(x = Pos1, y = ID, xend = Pos2, yend = ID, colour = Type), linewidth=1) +
    scale_color_manual(values=my.sv.color, labels=c("DEL"="Deletion", "INS"="Insertion", "INV"="Inversion", "ITX"="Intra-chromosomal translocations"), name="SV type") +
    scale_x_continuous(limits = c(17260000, 17340000), breaks = c(17260000, 17340000), labels = c("17260", "17340")) +
    labs(y="", x="LG3 position (kbp)", title=paste0(mydata, "_", sex)) +
    theme_bw() + theme(axis.text.y=element_blank(), axis.ticks.y = element_blank())
    
