
########################################## HIest ##########################################
###### SNPs fitlering 
## DEN_RUS
# snps of no missing data in parental populations 
plink2 --bfile marine237_a2m7_no3.12_LD2_a5g1 --keep DEN_RUS.list --geno 0 --allow-extra-chr --export vcf-4.2 id-paste=iid --out marine237_a2m7_no3.12_LD2_a5g1_DENRUSg0

# allele freq in parental pops
vcftools --vcf marine237_a2m7_no3.12_LD2_a5g1_DENRUSg0.vcf --keep DEN-NOR.list --freq --out DEN
vcftools --vcf marine237_a2m7_no3.12_LD2_a5g1_DENRUSg0.vcf --keep RUS-LEV.list --freq --out RUS

# select snps in R
den = read.table("DEN.frq", skip=1)
names(den) = c("CHROM", "POS", "N_ALLELES", "N_CHR", "a1.freq", "a2.freq")
rus = read.table("RUS.frq", skip=1)
names(rus) = c("CHROM", "POS", "N_ALLELES", "N_CHR", "a1.freq", "a2.freq")

sites = den[, 1:2]
sites$DEN.freq= "NULL"
sites$RUS.freq= "NULL"
for (i in 1:nrow(sites)) {
 den.a1 = den[i, "a1.freq"]
 rus.a1 = rus[i, "a1.freq"]
 if (unlist(strsplit(den.a1, split=":"))[1] == unlist(strsplit(rus.a1, split=":"))[1]) {
 sites[i, "DEN.freq"] = as.numeric(unlist(strsplit(den.a1, split=":"))[2])
 sites[i, "RUS.freq"] = as.numeric(unlist(strsplit(rus.a1, split=":"))[2])
 } }
sites$DEN.freq = as.numeric(sites$DEN.freq)
sites$RUS.freq = as.numeric(sites$RUS.freq)
sites$abs.freq = abs(sites$DEN.freq - sites$RUS.freq)

write.table(sites, "DENRUS_freq.csv", row.names=F)
write.table(sites[sites$abs.freq == 1, 1:2],  "sites_freq10.list", row.names=F, quote=F)

# filter keeping only the selected snps
vcftools --vcf marine237_a2m7_no3.12_LD2_a5g1.vcf \
--positions sites_freq10.list \
--recode --recode-INFO-all \
--out marine237_a2m7_no3.12_LD2_a5g1_DENRUSg0freq10


## GER_SWE 
plink2 --bfile ../../../filter/bed_LD/marine237_a2m7_no3.12_LD2_a5g1 --keep GER_SWE.list --geno 0 --allow-extra-chr --export vcf-4.2 id-paste=iid --out marine237_a2m7_no3.12_LD2_a5g1_GERSWEg0
vcftools --vcf marine237_a2m7_no3.12_LD2_a5g1_GERSWEg0.vcf --keep GER-RUE.list --freq --out GER
vcftools --vcf marine237_a2m7_no3.12_LD2_a5g1_GERSWEg0.vcf --keep SWE-GOT.list --freq --out SWE

# in R
ger = read.table("GER.frq", skip=1)
names(ger) = c("CHROM", "POS", "N_ALLELES", "N_CHR", "a1.freq", "a2.freq")
swe = read.table("SWE.frq", skip=1)
names(swe) = c("CHROM", "POS", "N_ALLELES", "N_CHR", "a1.freq", "a2.freq")

sites = ger[, 1:2]
sites$GER.freq= "NULL"
sites$SWE.freq= "NULL"
for (i in 1:nrow(sites)) {
 ger.a1 = ger[i, "a1.freq"]
 swe.a1 = swe[i, "a1.freq"]
 if (unlist(strsplit(ger.a1, split=":"))[1] == unlist(strsplit(swe.a1, split=":"))[1]) {
 sites[i, "GER.freq"] = as.numeric(unlist(strsplit(ger.a1, split=":"))[2])
 sites[i, "SWE.freq"] = as.numeric(unlist(strsplit(swe.a1, split=":"))[2])
 } }
sites$GER.freq = as.numeric(sites$GER.freq)
sites$SWE.freq = as.numeric(sites$SWE.freq)
sites$abs.freq = abs(sites$GER.freq - sites$SWE.freq)

write.table(sites, "GERSWE_freq.csv", row.names=F)
write.table(sites[sites$abs.freq >= 0.4, 1:2],  "sites_freq4.list", row.names=F, quote=F)
# end R

vcftools --vcf ../../../filter/bed_LD/marine237_a2m7_no3.12_LD2_a5g1.vcf \
--positions sites_freq4.list --keep GER_SWE_POL.list \
--recode --recode-INFO-all \
--out marine237_a2m7_no3.12_LD2_a5g1_GERSWEg0freq4_pop3

########################################### plot HIest ###########################################
library(HIest)
library(vcfR)
library(ggplot2)
library(ggpubr)
ind237 = read.csv("marine237.csv")

## all populations
endpops = "DENRUS"
freq=c(4, 5, 8, 10)

## three populations
endpops = "GERSWE"
freq=4

P = read.csv(paste0(endpops, "_freq.csv"), sep=" ")
for (f in freq) {
  p = P[P$abs.freq >= f/10, 1:4]
  names(p) = c("Locus", "Allele",  "P1", "P2")
  
  data = read.vcfR(paste0("marine237_a2m7_no3.12_LD2_a5g1_", endpops,
                          "g0freq", f, ".recode.vcf")) 
  G = t(data@gt)
  G = G[-1, ]
  if(!(dim(G)[2] == nrow(p))){print("P and G data do not match in nsnps!")}
  nsnps = dim(G)[2] 
  ninds = dim(G)[1] 
  
  g = as.data.frame(NULL)
  for(i in 1:nrow(G)){
    count = sapply(G[i,], FUN = function(x){
      if(!is.na(x)) {
        gt = unlist(strsplit(x, split="/"))
        x = as.numeric(gt[1]) + as.numeric(gt[2])}
      else{x = "NA"}
    })
    g = rbind(g, count)
  }
  row.names(g) = row.names(G)
  colnames(g) = (data@fix)[,3] # ID
  
  HI.ac <- HIest(g, p,  type="allele.count",
                 iterations=500, surf=TRUE, startgrid=50)
  HI.ac$SampleID = row.names(G)
  HI.ac = merge(HI.ac, 
                ind237[, c("SampleID", "Species", "Population", "sex_region", "sex",
                           "adm2", "adm3", "adm4", "adm5")], 
                by="SampleID")
  
  save(f, nsnps, ninds, p, g, HI.ac, 
       file=paste0(endpops, "g0freq", f, ".RData"))
  
  ggplot(data=HI.ac) + 
    geom_segment(aes(x = 0, y = 0, xend = 0.5, yend = 1)) + 
    geom_segment(aes(x = 0, y = 0, xend = 1, yend = 0)) + 
    geom_segment(aes(x = 0.5, y = 1, xend = 1, yend = 0)) +
    geom_point(aes(x=S, y=H, color=Population)) + 
    labs(x="S", y="HI", 
         title = paste0(endpops, "_freq", f/10, ": n=", ninds, ", snps=", nsnps)) +
    theme_classic()
}

png(paste0(endpops, "_freq", f/10, ".png"), height = 3, width = 5, units = "in", res=600)
dev.off()
